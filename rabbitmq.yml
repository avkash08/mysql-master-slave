apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-admin
type: Opaque
data:
  user: YWRtaW4=
  pass: U3YtcTQ3U1BvdDEy

---

apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-config
data:
  erlang-cookie: cmFiYml0bXEtazhzLURlbTA=

---
## Loadbalancer type service to access RabbitMQ externally

#apiVersion: v1
#kind: Service
#metadata:
#  name: rabbitmq-management
#  labels:
#    app: rabbitmq
#spec:
#  ports:
#  - port: 15672
#    name: http
#  selector:
#    app: rabbitmq
#  type: LoadBalancer # NodePort # Or LoadBalancer in production w/ proper security

---

apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
spec:
  ports:
  - port: 5672
    name: amqp
  - port: 4369
    name: epmd
  - port: 25672
    name: rabbitmq-dist
  - port: 1883
    name: tcp1883to1883
  - port: 15672
    name: tcp15672to15672
  clusterIP: None
  selector:
    app: rabbitmq

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
spec:
  serviceName: "rabbitmq"
  replicas: 3
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: avkash08/rabbitmq-mqtt:3.8.9 #rabbitmq:3.6.6-management-alpine
#        image: avkash08/rabbitmq-mqtt:3.8.9
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/sh
              - -c
              - >
                if [ -z "$(grep rabbitmq /etc/resolv.conf)" ]; then
                  sed "s/^search \([^ ]\+\)/search rabbitmq.\1 \1/" /etc/resolv.conf > /etc/resolv.conf.new;
                  cat /etc/resolv.conf.new > /etc/resolv.conf;
                  rm /etc/resolv.conf.new;
                fi;
                until rabbitmqctl node_health_check; do sleep 1; done;
                if [[ "$HOSTNAME" != "rabbitmq-0" && -z "$(rabbitmqctl cluster_status | grep rabbitmq-0)" ]]; then
                  rabbitmqctl stop_app;
                  rabbitmqctl join_cluster rabbit@rabbitmq-0;
                  rabbitmqctl start_app;
                fi;
                rabbitmqctl set_policy ha-all "." '{"ha-mode":"exactly","ha-params":3,"ha-sync-mode":"automatic"}'
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-admin
              key: user
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq-admin
              key: pass
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: rabbitmq-config
              key: erlang-cookie
        ports:
        - containerPort: 5672
          name: amqp
        volumeMounts:
        - name: rabbitmq
          mountPath: /var/lib/rabbitmq
        resources:
          limits:
            cpu: 500m
          requests:
            cpu: 200m
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 1883
          timeoutSeconds: 2


  volumeClaimTemplates:
  - metadata:
      name: rabbitmq
    spec:
      storageClassName: gfiwire-storage-class-ebs
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

---

apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: rabbitmq
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: statefulset
    name: rabbitmq
  minReplicas: 3
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75


